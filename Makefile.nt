#**************************************************************************
#*                                                                        *
#*                                 OCaml                                  *
#*                                                                        *
#*            Xavier Leroy, projet Cristal, INRIA Rocquencourt            *
#*                                                                        *
#*   Copyright 1999 Institut National de Recherche en Informatique et     *
#*     en Automatique.                                                    *
#*                                                                        *
#*   All rights reserved.  This file is distributed under the terms of    *
#*   the GNU Lesser General Public License version 2.1, with the          *
#*   special exception on linking described in the file LICENSE.          *
#*                                                                        *
#**************************************************************************

# The main Makefile

include Makefile.shared

# Recompile the system using the bootstrap compiler
all: runtime ocamlc ocamllex ocamlyacc ocamltools library ocaml \
  otherlibraries $(WITH_DEBUGGER) $(WITH_OCAMLDOC)

# The compilation of ocaml will fail if the runtime has changed.
# Never mind, just do make bootstrap to reach fixpoint again.

# Compile everything the first time
world: coldstart all

# Core bootstrapping cycle
coreboot:
# Save the original bootstrap compiler
	$(MAKEREC) backup
# Promote the new compiler but keep the old runtime
# This compiler runs on boot/ocamlrun and produces bytecode for
# byterun/ocamlrun
	$(MAKEREC) promote-cross
# Rebuild ocamlc and ocamllex (run on byterun/ocamlrun)
	$(MAKEREC) partialclean
	$(MAKEREC) ocamlc ocamllex ocamltools
# Rebuild the library (using byterun/ocamlrun ./ocamlc)
	$(MAKEREC) library-cross
# Promote the new compiler and the new runtime
	$(MAKEREC) promote
# Rebuild the core system
	$(MAKEREC) partialclean
	$(MAKEREC) core
# Check if fixpoint reached
	$(MAKEREC) compare

# Do a complete bootstrapping cycle
bootstrap:
	$(MAKEREC) coreboot
	$(MAKEREC) all
	$(MAKEREC) compare

# Start up the system from the distribution compiler
coldstart:
	cd byterun ; $(MAKE) $(BOOT_FLEXLINK_CMD) all
	cp byterun/ocamlrun.exe boot/ocamlrun.exe
	cd yacc ; $(MAKE) $(BOOT_FLEXLINK_CMD) all
	cp yacc/ocamlyacc.exe boot/ocamlyacc.exe
	cd stdlib ; \
	  $(MAKE) $(BOOT_FLEXLINK_CMD) \
	             COMPILER="../boot/ocamlc -use-prims ../byterun/primitives"\
	             all
	cd stdlib ; cp $(LIBFILES) ../boot

# Build the core system: the minimum needed to make depend and bootstrap
core:
	$(MAKEREC) runtime
	$(MAKEREC) coreall

# Recompile the core system using the bootstrap compiler
coreall:
	$(MAKEREC) ocamlc
	$(MAKEREC) ocamllex ocamlyacc ocamltools library

# Save the current bootstrap compiler
backup:
	mkdir -p boot/Saved
	if test -d $(MAXSAVED); then rm -r $(MAXSAVED); fi
	mv boot/Saved boot/Saved.prev
	mkdir boot/Saved
	mv boot/Saved.prev boot/Saved/Saved.prev
	cp boot/ocamlrun.exe boot/Saved/ocamlrun.exe
	cd boot ; mv ocamlc ocamllex ocamldep ocamlyacc.exe Saved
	cd boot ; cp $(LIBFILES) Saved

# Promote the newly compiled system to the rank of cross compiler
# (Runs on the old runtime, produces code for the new runtime)
promote-cross:
	$(CAMLRUN) tools/stripdebug ocamlc boot/ocamlc
	$(CAMLRUN) tools/stripdebug lex/ocamllex boot/ocamllex
	cp yacc/ocamlyacc.exe boot/ocamlyacc.exe
	$(CAMLRUN) tools/stripdebug tools/ocamldep boot/ocamldep
	cd stdlib ; cp $(LIBFILES) ../boot

# Promote the newly compiled system to the rank of bootstrap compiler
# (Runs on the new runtime, produces code for the new runtime)
promote: promote-cross
	cp byterun/ocamlrun.exe boot/ocamlrun.exe

# Restore the saved bootstrap compiler if a problem arises
restore:
	cd boot/Saved ; mv * ..
	rmdir boot/Saved
	mv boot/Saved.prev boot/Saved

# Check if fixpoint reached
compare:
	@if $(CAMLRUN) tools/cmpbyt boot/ocamlc ocamlc \
         && $(CAMLRUN) tools/cmpbyt boot/ocamllex lex/ocamllex \
         && $(CAMLRUN) tools/cmpbyt boot/ocamldep tools/ocamldep; \
	then echo "Fixpoint reached, bootstrap succeeded."; \
	else echo "Fixpoint not reached, try one more bootstrapping cycle."; \
	fi

# Remove old bootstrap compilers
cleanboot:
	rm -rf boot/Saved/Saved.prev/*

# Compile the native-code compiler
opt-core:
	$(MAKEREC) runtimeopt
	$(MAKEREC) ocamlopt
	$(MAKEREC) libraryopt

opt:
	$(MAKEREC) opt-core
	$(MAKEREC) otherlibrariesopt ocamltoolsopt

# Native-code versions of the tools
# If the submodule is initialised, then opt.opt will build a native flexlink
opt.opt: core opt-core ocamlc.opt all ocamlopt.opt ocamllex.opt \
         ocamltoolsopt ocamltoolsopt.opt otherlibrariesopt $(OCAMLDOC_OPT) \
         $(if $(wildcard flexdll/Makefile),flexlink.opt)

# Complete build using fast compilers
world.opt: coldstart opt.opt

# Installation

install:
	mkdir -p "$(INSTALL_BINDIR)"
	mkdir -p "$(INSTALL_LIBDIR)"
	mkdir -p "$(INSTALL_STUBLIBDIR)"
	mkdir -p "$(INSTALL_COMPLIBDIR)"
	cp VERSION "$(INSTALL_LIBDIR)/"
	cd byterun ; $(MAKE) install
	cp ocamlc "$(INSTALL_BINDIR)/ocamlc.exe"
	cp ocaml "$(INSTALL_BINDIR)/ocaml.exe"
	cp ocamlc "$(INSTALL_BINDIR)/ocamlc.byte.exe"
	cd stdlib ; $(MAKE) install
	cp lex/ocamllex "$(INSTALL_BINDIR)/ocamllex.exe"
	cp yacc/ocamlyacc.exe "$(INSTALL_BINDIR)/ocamlyacc.exe"
	cp lex/ocamllex "$(INSTALL_BINDIR)/ocamllex.byte.exe"
	cp utils/*.cmi utils/*.cmt utils/*.cmti \
	   parsing/*.cmi parsing/*.cmt parsing/*.cmti \
	   typing/*.cmi typing/*.cmt typing/*.cmti \
	   bytecomp/*.cmi bytecomp/*.cmt bytecomp/*.cmti \
	   driver/*.cmi driver/*.cmt driver/*.cmti \
	   toplevel/*.cmi toplevel/*.cmt toplevel/*.cmti "$(INSTALL_COMPLIBDIR)"
	cp compilerlibs/ocamlcommon.cma compilerlibs/ocamlbytecomp.cma \
	   compilerlibs/ocamltoplevel.cma $(BYTESTART) $(TOPLEVELSTART) \
	   "$(INSTALL_COMPLIBDIR)"
	cp expunge "$(INSTALL_LIBDIR)/expunge.exe"
	cp toplevel/topdirs.cmi "$(INSTALL_LIBDIR)"
	cd tools ; $(MAKE) install
	for i in $(OTHERLIBRARIES); do \
	  $(MAKE) -C otherlibs/$$i install || exit $$?; \
	done
	if test -n "$(WITH_OCAMLDOC)"; then \
	  (cd ocamldoc; $(MAKE) install); \
	fi
	if test -n "$(WITH_DEBUGGER)"; then \
	  (cd debugger; $(MAKE) install); \
	fi
	if test -n "$(FLEXDLL_SUBMODULE_PRESENT)"; then \
	  $(MAKEREC) install-flexdll; \
	fi
	cp config/Makefile "$(INSTALL_LIBDIR)/Makefile.config"
	if test -f ocamlopt; then $(MAKEREC) installopt; else \
	   cd "$(INSTALL_BINDIR)"; \
	   cp ocamlc.byte$(EXE) ocamlc$(EXE); \
	   cp ocamllex.byte$(EXE) ocamllex$(EXE); \
	fi

install-flexdll:
# The $(if ...) installs the correct .manifest file for MSVC and MSVC64
# (GNU make doesn't have ifeq as a function, hence slightly convoluted use of
#  filter-out)
	cp flexdll/flexlink.exe \
	   $(if $(filter-out mingw,$(TOOLCHAIN)),\
	     flexdll/default$(filter-out _i386,_$(ARCH)).manifest) \
	   $(INSTALL_BINDIR)/
	cp flexdll/flexdll_*.$(O) $(INSTALL_LIBDIR)

# Installation of the native-code compiler
installopt:
	$(MAKE) -C asmrun install
	cp ocamlopt "$(INSTALL_BINDIR)/ocamlopt.byte$(EXE)"
	$(MAKE) -C stdlib installopt
	cp middle_end/*.cmi middle_end/*.cmt middle_end/*.cmti \
	    middle_end/*.mli \
		"$(INSTALL_COMPLIBDIR)"
	cp middle_end/base_types/*.cmi middle_end/base_types/*.cmt \
	    middle_end/base_types/*.cmti middle_end/base_types/*.mli \
		"$(INSTALL_COMPLIBDIR)"
	cp asmcomp/*.cmi asmcomp/*.cmt asmcomp/*.cmti asmcomp/*.mli \
		"$(INSTALL_COMPLIBDIR)"
	cp compilerlibs/ocamloptcomp.cma $(OPTSTART) "$(INSTALL_COMPLIBDIR)"
	if test -n "$(WITH_OCAMLDOC)"; then \
	  $(MAKE) -C ocamldoc installopt; \
	fi
	for i in $(OTHERLIBRARIES); do \
	  $(MAKE) -C otherlibs/$$i installopt || exit $$?; \
	done
	if test -f ocamlopt.opt ; then $(MAKE) installoptopt; else \
	   cd "$(INSTALL_BINDIR)"; \
	   $(LN) ocamlopt.byte$(EXE) ocamlopt$(EXE); \
	fi
	$(MAKE) -C tools installopt
	if test -f ocamlopt.opt -a -f flexdll/flexlink.opt ; then \
	  cp -f flexdll/flexlink.opt "$(INSTALL_BINDIR)/flexlink$(EXE)" ; \
	fi

# The clean target

clean:: partialclean

# The compiler

compilerlibs/ocamlcommon.cma: $(COMMON)
	$(CAMLC) -a -o $@ $(COMMON)
partialclean::
	rm -f compilerlibs/ocamlcommon.cma

# The bytecode compiler

compilerlibs/ocamlbytecomp.cma: $(BYTECOMP)
	$(CAMLC) -a -o $@ $(BYTECOMP)
partialclean::
	rm -f compilerlibs/ocamlbytecomp.cma

ocamlc: compilerlibs/ocamlcommon.cma compilerlibs/ocamlbytecomp.cma $(BYTESTART)
	$(CAMLC) $(LINKFLAGS) -compat-32 -o ocamlc \
	         compilerlibs/ocamlcommon.cma \
	         compilerlibs/ocamlbytecomp.cma $(BYTESTART)

partialclean::
	rm -f ocamlc

# The native-code compiler

compilerlibs/ocamloptcomp.cma: $(MIDDLE_END) $(ASMCOMP)
	$(CAMLC) -a -o $@ $(MIDDLE_END) $(ASMCOMP)
partialclean::
	rm -f compilerlibs/ocamloptcomp.cma

ocamlopt: compilerlibs/ocamlcommon.cma compilerlibs/ocamloptcomp.cma \
          compilerlibs/ocamlbytecomp.cma $(OPTSTART)
	$(CAMLC) $(LINKFLAGS) -o ocamlopt \
          compilerlibs/ocamlcommon.cma compilerlibs/ocamloptcomp.cma \
	  compilerlibs/ocamlbytecomp.cma $(OPTSTART)

partialclean::
	rm -f ocamlopt

# The toplevel

compilerlibs/ocamltoplevel.cma: $(TOPLEVEL)
	$(CAMLC) -a -o $@ $(TOPLEVEL)
partialclean::
	rm -f compilerlibs/ocamltoplevel.cma

ocaml: compilerlibs/ocamlcommon.cma compilerlibs/ocamlbytecomp.cma \
       compilerlibs/ocamltoplevel.cma $(TOPLEVELSTART) expunge
	$(CAMLC) $(LINKFLAGS) -linkall -o ocaml.tmp \
          compilerlibs/ocamlcommon.cma compilerlibs/ocamlbytecomp.cma \
          compilerlibs/ocamltoplevel.cma $(TOPLEVELSTART)
	- $(CAMLRUN) ./expunge ocaml.tmp ocaml $(PERVASIVES)
	rm -f ocaml.tmp

partialclean::
	rm -f ocaml

runtop:
	$(MAKEREC) core
	$(MAKEREC) ocaml
	@rlwrap --help 2>/dev/null && $(EXTRAPATH) rlwrap $(RUNTOP) || $(EXTRAPATH) $(RUNTOP)

natruntop:
	$(MAKEREC) runtime
	$(MAKEREC) coreall
	$(MAKEREC) opt.opt
	$(MAKEREC) ocamlnat
	@rlwrap --help 2>/dev/null && $(EXTRAPATH) rlwrap $(NATRUNTOP) || $(EXTRAPATH) $(NATRUNTOP)

# Native dynlink

otherlibs/dynlink/dynlink.cmxa: otherlibs/dynlink/natdynlink.ml
	cd otherlibs/dynlink && $(MAKE) allopt

# The parser

parsing/parser.mli parsing/parser.ml: parsing/parser.mly
	$(CAMLYACC) $(YACCFLAGS) parsing/parser.mly

partialclean::
	rm -f parsing/parser.mli parsing/parser.ml parsing/parser.output

beforedepend:: parsing/parser.mli parsing/parser.ml

# The lexer

parsing/lexer.ml: parsing/lexer.mll
	$(CAMLLEX) parsing/lexer.mll

partialclean::
	rm -f parsing/lexer.ml

beforedepend:: parsing/lexer.ml

# Shared parts of the system compiled with the native-code compiler

compilerlibs/ocamlcommon.cmxa: $(COMMON:.cmo=.cmx)
	$(CAMLOPT) -a -o $@ $(COMMON:.cmo=.cmx)
partialclean::
	rm -f compilerlibs/ocamlcommon.cmxa compilerlibs/ocamlcommon.$(A)

# The bytecode compiler compiled with the native-code compiler

compilerlibs/ocamlbytecomp.cmxa: $(BYTECOMP:.cmo=.cmx)
	$(CAMLOPT) -a -o $@ $(BYTECOMP:.cmo=.cmx)
partialclean::
	rm -f compilerlibs/ocamlbytecomp.cmxa compilerlibs/ocamlbytecomp.$(A)

ocamlc.opt: compilerlibs/ocamlcommon.cmxa compilerlibs/ocamlbytecomp.cmxa \
            $(BYTESTART:.cmo=.cmx)
	$(CAMLOPT) $(LINKFLAGS) -ccopt "$(BYTECCLINKOPTS)" -o ocamlc.opt \
          compilerlibs/ocamlcommon.cmxa compilerlibs/ocamlbytecomp.cmxa \
          $(BYTESTART:.cmo=.cmx) -cclib "$(BYTECCLIBS)"

partialclean::
	rm -f ocamlc.opt

# The native-code compiler compiled with itself

compilerlibs/ocamloptcomp.cmxa: $(MIDDLE_END:.cmo=.cmx) $(ASMCOMP:.cmo=.cmx)
	$(CAMLOPT) -a -o $@ $(MIDDLE_END:.cmo=.cmx) $(ASMCOMP:.cmo=.cmx)
partialclean::
	rm -f compilerlibs/ocamloptcomp.cmxa compilerlibs/ocamloptcomp.$(A)

ocamlopt.opt: compilerlibs/ocamlcommon.cmxa compilerlibs/ocamloptcomp.cmxa \
              compilerlibs/ocamlbytecomp.cmxa \
              $(OPTSTART:.cmo=.cmx)
	$(CAMLOPT) $(LINKFLAGS) -o ocamlopt.opt \
          compilerlibs/ocamlcommon.cmxa compilerlibs/ocamloptcomp.cmxa \
	  compilerlibs/ocamlbytecomp.cmxa \
          $(OPTSTART:.cmo=.cmx)

partialclean::
	rm -f ocamlopt.opt

$(COMMON:.cmo=.cmx) $(BYTECOMP:.cmo=.cmx) $(MIDDLE_END:.cmo=.cmx) \
$(ASMCOMP:.cmo=.cmx): ocamlopt

# The predefined exceptions and primitives

byterun/primitives:
	cd byterun ; $(MAKE) primitives

bytecomp/runtimedef.ml: byterun/primitives byterun/caml/fail.h
	(echo 'let builtin_exceptions = [|'; \
	 sed -n -e 's|.*/\* \("[A-Za-z_]*"\) \*/$$|  \1;|p' \
	     byterun/caml/fail.h; \
	 echo '|]'; \
	 echo 'let builtin_primitives = [|'; \
	 sed -e 's/.*/  "&";/' byterun/primitives; \
	 echo '|]') > bytecomp/runtimedef.ml

partialclean::
	rm -f bytecomp/runtimedef.ml

beforedepend:: bytecomp/runtimedef.ml

# Choose the right machine-dependent files

asmcomp/arch.ml: asmcomp/$(ARCH)/arch.ml
	cp asmcomp/$(ARCH)/arch.ml asmcomp/arch.ml

partialclean::
	rm -f asmcomp/arch.ml

beforedepend:: asmcomp/arch.ml

asmcomp/proc.ml: asmcomp/$(ARCH)/proc.ml
	cp asmcomp/$(ARCH)/proc.ml asmcomp/proc.ml

partialclean::
	rm -f asmcomp/proc.ml

beforedepend:: asmcomp/proc.ml

asmcomp/selection.ml: asmcomp/$(ARCH)/selection.ml
	cp asmcomp/$(ARCH)/selection.ml asmcomp/selection.ml

partialclean::
	rm -f asmcomp/selection.ml

beforedepend:: asmcomp/selection.ml

asmcomp/CSE.ml: asmcomp/$(ARCH)/CSE.ml
	cp asmcomp/$(ARCH)/CSE.ml asmcomp/CSE.ml

partialclean::
	rm -f asmcomp/CSE.ml

beforedepend:: asmcomp/CSE.ml

asmcomp/reload.ml: asmcomp/$(ARCH)/reload.ml
	cp asmcomp/$(ARCH)/reload.ml asmcomp/reload.ml

partialclean::
	rm -f asmcomp/reload.ml

beforedepend:: asmcomp/reload.ml

asmcomp/scheduling.ml: asmcomp/$(ARCH)/scheduling.ml
	cp asmcomp/$(ARCH)/scheduling.ml asmcomp/scheduling.ml

partialclean::
	rm -f asmcomp/scheduling.ml

beforedepend:: asmcomp/scheduling.ml

# Preprocess the code emitters

asmcomp/emit.ml: asmcomp/$(ARCH)/emit.mlp tools/cvt_emit
	$(CAMLRUN) tools/cvt_emit < asmcomp/$(ARCH)/emit.mlp > asmcomp/emit.ml

partialclean::
	rm -f asmcomp/emit.ml

beforedepend:: asmcomp/emit.ml

tools/cvt_emit: tools/cvt_emit.mll
	cd tools ; $(MAKE) cvt_emit

# The "expunge" utility

expunge: compilerlibs/ocamlcommon.cma compilerlibs/ocamlbytecomp.cma \
         toplevel/expunge.cmo
	$(CAMLC) $(LINKFLAGS) -o expunge compilerlibs/ocamlcommon.cma \
	         compilerlibs/ocamlbytecomp.cma toplevel/expunge.cmo

partialclean::
	rm -f expunge

# The runtime system for the bytecode compiler

runtime: makeruntime stdlib/libcamlrun.$(A)

makeruntime:
	cd byterun ; $(MAKE) $(BOOT_FLEXLINK_CMD) all
stdlib/libcamlrun.$(A): byterun/libcamlrun.$(A)
	cp byterun/libcamlrun.$(A) stdlib/libcamlrun.$(A)
clean::
	cd byterun ; $(MAKE) clean
	rm -f stdlib/libcamlrun.$(A)
alldepend::
	cd byterun ; $(MAKE) depend

# The runtime system for the native-code compiler

runtimeopt: makeruntimeopt stdlib/libasmrun.$(A)

makeruntimeopt:
	cd asmrun ; $(MAKE) $(BOOT_FLEXLINK_CMD) all
stdlib/libasmrun.$(A): asmrun/libasmrun.$(A)
	cp asmrun/libasmrun.$(A) stdlib/libasmrun.$(A)
clean::
	cd asmrun ; $(MAKE) clean
	rm -f stdlib/libasmrun.$(A)
alldepend::
	cd asmrun ; $(MAKE) depend

# The library

library:
	cd stdlib && $(MAKE) $(BOOT_FLEXLINK_CMD) all
library-cross:
	cd stdlib \
	&& $(MAKE) $(BOOT_FLEXLINK_CMD) CAMLRUN=../byterun/ocamlrun all
libraryopt:
	cd stdlib && $(MAKE) $(BOOT_FLEXLINK_CMD) allopt
partialclean::
	cd stdlib && $(MAKE) clean
alldepend::
	cd stdlib && $(MAKE) depend

# The lexer and parser generators

ocamllex:
	cd lex ; $(MAKE) all
ocamllex.opt:
	cd lex ; $(MAKE) allopt
partialclean::
	cd lex ; $(MAKE) clean
alldepend::
	cd lex ; $(MAKE) depend

ocamlyacc:
	cd yacc ; $(MAKE) $(BOOT_FLEXLINK_CMD) all
clean::
	cd yacc ; $(MAKE) clean

# OCamldoc

ocamldoc:
	cd ocamldoc ; $(MAKE) all
ocamldoc.opt:
	cd ocamldoc ; $(MAKE) opt.opt
partialclean::
	cd ocamldoc ; $(MAKE) clean
alldepend::
	cd ocamldoc ; $(MAKE) depend

# The extra libraries

otherlibraries:
	for i in $(OTHERLIBRARIES); do \
	  $(MAKE) -C otherlibs/$$i all || exit $$?; \
	done
otherlibrariesopt:
	for i in $(OTHERLIBRARIES); \
	  do $(MAKE) -C otherlibs/$$i allopt || exit $$?; \
	done
partialclean::
	for i in $(OTHERLIBRARIES); \
	  do $(MAKE) -C otherlibs/$$i partialclean || exit $$?; \
	done
clean::
	for i in $(OTHERLIBRARIES); do \
	  $(MAKE) -C otherlibs/$$i clean || exit $$?; \
	done
alldepend::
	for i in $(OTHERLIBRARIES); do \
	  $(MAKE) -C otherlibs/$$i depend || exit $$?; \
	done

# The replay debugger

ocamldebugger: ocamlc ocamlyacc ocamllex
	cd debugger; $(MAKE) all
partialclean::
	cd debugger; $(MAKE) clean
alldepend::
	cd debugger; $(MAKE) depend

# Make clean in the test suite

clean::
	cd testsuite; $(MAKE) clean

# Default rules

.SUFFIXES: .ml .mli .cmo .cmi .cmx

.ml.cmo:
	$(CAMLC) $(COMPFLAGS) -c $<

.mli.cmi:
	$(CAMLC) $(COMPFLAGS) -c $<

.ml.cmx:
	$(CAMLOPT) $(COMPFLAGS) -c $<

partialclean::
	rm -f utils/*.cm* utils/*.$(O) utils/*.$(S)
	rm -f parsing/*.cm* parsing/*.$(O) parsing/*.$(S)
	rm -f typing/*.cm* typing/*.$(O) typing/*.$(S)
	rm -f bytecomp/*.cm* bytecomp/*.$(O) bytecomp/*.$(S)
	rm -f asmcomp/*.cm* asmcomp/*.$(O) asmcomp/*.$(S)
	rm -f middle_end/*.cm* middle_end/*.$(O) middle_end/*.$(S)
	rm -f middle_end/base_types/*.cm* middle_end/base_types/*.$(O) \
	      middle_end/base_types/*.$(S)
	rm -f driver/*.cm* driver/*.$(O) driver/*.$(S)
	rm -f toplevel/*.cm* toplevel/*.$(O) toplevel/*.$(S)
	rm -f tools/*.cm* tools/*.$(O) tools/*.$(S)

depend: beforedepend
	(for d in utils parsing typing bytecomp asmcomp middle_end \
	 middle_end/base_types driver toplevel; \
	 do $(CAMLDEP) -slash $(DEPFLAGS) $$d/*.mli $$d/*.ml; \
	 done) > .depend
	$(CAMLDEP) -slash $(DEPFLAGS) -native \
		-impl driver/compdynlink.mlopt >> .depend
	$(CAMLDEP) -slash $(DEPFLAGS) -bytecode \
		-impl driver/compdynlink.mlbyte >> .depend

alldepend:: depend

distclean:
	$(MAKEREC) clean
	rm -f asmrun/.depend.nt byterun/.depend.nt \
	            otherlibs/bigarray/.depend.nt  \
		    otherlibs/str/.depend.nt
	rm -f boot/ocamlrun boot/ocamlrun.exe boot/camlheader boot/ocamlyacc \
	      boot/*.cm* boot/libcamlrun.a
	rm -f config/Makefile config/m.h config/s.h
	rm -f tools/*.bak
	rm -f ocaml ocamlc
	rm -f testsuite/_log

.PHONY: all backup bootstrap checkstack clean
.PHONY: partialclean beforedepend alldepend cleanboot coldstart
.PHONY: compare core coreall
.PHONY: coreboot depend distclean install installopt
.PHONY: library library-cross libraryopt
.PHONY: ocamldebugger ocamldoc
.PHONY: ocamldoc.opt ocamllex ocamllex.opt ocamltools ocamltoolsopt
.PHONY: ocamltoolsopt.opt ocamlyacc opt-core opt opt.opt otherlibraries
.PHONY: otherlibrariesopt promote promote-cross
.PHONY: restore runtime runtimeopt makeruntimeopt world world.opt

include .depend
